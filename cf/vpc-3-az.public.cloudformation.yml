### This an example of a Cloudformation script in yaml format.
###
### To execute this script you can:
###
### 1. Use the AWS console -> Cloudformation -> Create Stack
###
### or
###
### 2. Use the awscli command line tool:
###
###    $ aws cloudformation create-stack \
###        --stack-name vpc-172-18       \
###        --template-body file://vpc-3-az.cloudformation.yml \
###        --params params.vpc-172-18.json
###
###
### A parameter file must be in the following format:
###
###     [
###       { "ParameterKey" : "VPCName"       , "ParameterValue" : "vpc-172.18.0.0/16" },
###       { "ParameterKey" : "CIDRVpc"       , "ParameterValue" : "172.18.0.0/16" },
###       { "ParameterKey" : "CIDRPublicA"   , "ParameterValue" : "172.18.11.0/24"},
###       { "ParameterKey" : "CIDRPrivateA"  , "ParameterValue" : "172.18.12.0/24"},
###       { "ParameterKey" : "CIDRDBSubnetA" , "ParameterValue" : "172.18.13.0/24"},
###       { "ParameterKey" : "CIDRPublicB"   , "ParameterValue" : "172.18.21.0/24"},
###       { "ParameterKey" : "CIDRPrivateB"  , "ParameterValue" : "172.18.22.0/24"},
###       { "ParameterKey" : "CIDRDBSubnetB" , "ParameterValue" : "172.18.23.0/24"},
###       { "ParameterKey" : "CIDRPublicC"   , "ParameterValue" : "172.18.31.0/24"},
###       { "ParameterKey" : "CIDRPrivateC"  , "ParameterValue" : "172.18.32.0/24"},
###       { "ParameterKey" : "CIDRDBSubnetC" , "ParameterValue" : "172.18.33.0/24"},
###       { "ParameterKey" : "SSHLocation"   , "ParameterValue" : "0.0.0.0/0"     }
###     ]
###

AWSTemplateFormatVersion: 2010-09-09

Description: |
  VPC-3-AZs - VPC built using AWS CloudFormation

Parameters:

  VPCName:       { Type: "String", Default: "VPC-3-AZs-Public", Description: "VPC name. Default: VPC-3-AZs-Public." }

  CIDRVpc:       { Type: "String", Default: "10.21.0.0/21", Description: "VPC CIDR"                  , AllowedPattern: "(\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})[/](\\d{1,2})", ConstraintDescription: "Must be a CIDR range a.b.c.d/x." }
  CIDRPublicA:   { Type: "String", Default: "10.21.1.0/24", Description: "VPC CIDR Subnet Public-A"  , AllowedPattern: "(\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})[/](\\d{1,2})", ConstraintDescription: "Must be a CIDR range a.b.c.d/x." }
  CIDRPublicB:   { Type: "String", Default: "10.21.2.0/24", Description: "VPC CIDR Subnet Public-B"  , AllowedPattern: "(\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})[/](\\d{1,2})", ConstraintDescription: "Must be a CIDR range a.b.c.d/x." }
  CIDRPublicC:   { Type: "String", Default: "10.21.3.0/24", Description: "VPC CIDR Subnet Public-C"  , AllowedPattern: "(\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})[/](\\d{1,2})", ConstraintDescription: "Must be a CIDR range a.b.c.d/x." }

  SSHLocation:   { Type: "String", Default: "0.0.0.0/0"   , Description: "SSH source. Default:0.0.0.0/0", AllowedPattern: "(\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})[/](\\d{1,2})", ConstraintDescription: "Must be a CIDR range a.b.c.d/x." }


Mappings:

    "VPCRange": {
      "VPC"       : { "CIDR": "10.21.0.0/21"  },

      "PublicA"   : { "CIDR": "10.21.1.0/24" },
      "PublicB"   : { "CIDR": "10.21.2.0/24" },
      "PublicC"   : { "CIDR": "10.21.3.0/24" }
    }


Resources:

  ###
  ### VPC + IGW
  ###
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CIDRVpc
      Tags:
        - { Key: Name , Value: !Ref VPCName }

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - { Key: Name, Value: { "Fn::Join":["",[ "IGW-",{"Ref":"VPCName" } ]] } }
        - { Key: VPC , Value: !Ref VPCName       }

  # Attach IGW to VPC
  IGWAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: { VpcId: !Ref VPC, InternetGatewayId: !Ref IGW }


  ###
  ### Public Routing
  ###   - Route-Table-Public
  ###
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - { Key: Name, Value: Route-Table-Public  }
        - { Key: VPC , Value: !Ref VPCName        }

  # Route to IGW
  RouteIGW:
    Type: AWS::EC2::Route
    DependsOn: IGW
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW


  ###
  ### Availability Zone A
  ###


  ##
  ## Subnet: Public-A
  ## ----------------
  ##
  SubnetPubA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CIDRPublicA
      AvailabilityZone: { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ] }
      MapPublicIpOnLaunch: True
      Tags:
        - { Key: Name , Value: PubSubnet-A  }
        - { Key: VPC  , Value: !Ref VPCName }
        - { Key: Class, Value: "build" }

  # Attach to: Route-Table-Public
  RouteTableAssociationPubA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: { SubnetId: !Ref SubnetPubA, RouteTableId: !Ref RouteTablePublic }


  ###
  ### Availability Zone B
  ###


  ##
  ## Subnet: Public-B
  ## ----------------
  ##
  SubnetPubB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CIDRPublicB
      AvailabilityZone: { "Fn::Select" : [ "1", { "Fn::GetAZs" : "" } ] }
      MapPublicIpOnLaunch: True
      Tags:
        - { Key: Name , Value: PubSubnet-B  }
        - { Key: VPC  , Value: !Ref VPCName }
        - { Key: Class, Value: "build" }

  # Attach to: Route-Table-Public
  RouteTableAssociationPubB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: { SubnetId: !Ref SubnetPubB, RouteTableId: !Ref RouteTablePublic }


  ###
  ### Availability Zone C
  ###


  ##
  ## Subnet: Public-C
  ## ----------------
  ##
  SubnetPubC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CIDRPublicC
      AvailabilityZone: { "Fn::Select" : [ "2", { "Fn::GetAZs" : "" } ] }
      MapPublicIpOnLaunch: True
      Tags:
        - { Key: Name , Value: PubSubnet-C  }
        - { Key: VPC  , Value: !Ref VPCName }
        - { Key: Class, Value: "build" }

  # Attach to: Route-Table-Public
  RouteTableAssociationPubC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: { SubnetId: !Ref SubnetPubC, RouteTableId: !Ref RouteTablePublic }


  ###
  ### Security Group for SSH
  ###
  SecurityGroupSSH:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: SSHSecurityGroup
      GroupDescription: Default SSH SecurityGroup
      SecurityGroupIngress:
        - { "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": { "Ref": "SSHLocation" } }
      Tags:
        - { Key: Name , Value: SSHSecurityGroup }
        - { Key: VPC  , Value: !Ref VPCName     }
        - { Key: Class, Value: "build" }

  ###
  ### Security Group for building...
  ###
  SecurityGroupBuild:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: BuildSecurityGroup
      GroupDescription: Default SSH SecurityGroup
      SecurityGroupIngress:
        - { "IpProtocol": "tcp", "FromPort":   "22", "ToPort":   "22", "CidrIp": { "Ref": "SSHLocation" } }
        - { "IpProtocol": "tcp", "FromPort":   "80", "ToPort":   "80", "CidrIp": { "Ref": "SSHLocation" } }
        - { "IpProtocol": "tcp", "FromPort":  "443", "ToPort":  "443", "CidrIp": { "Ref": "SSHLocation" } }
        - { "IpProtocol": "tcp", "FromPort": "8000", "ToPort": "8000", "CidrIp": { "Ref": "SSHLocation" } }
        - { "IpProtocol": "tcp", "FromPort": "8080", "ToPort": "8080", "CidrIp": { "Ref": "SSHLocation" } }
      Tags:
        - { Key: Name , Value: BuildSecurityGroup }
        - { Key: VPC  , Value: !Ref VPCName     }
        - { Key: Class, Value: "build" }

  ###
  ### Security Group for DBs...
  ###
  SecurityGroupDB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: DBSecurityGroup
      GroupDescription: Default SSH SecurityGroup
      SecurityGroupIngress:
        - { "IpProtocol": "tcp", "FromPort": "3306", "ToPort": "3306", "SourceSecurityGroupId": { "Ref": "SecurityGroupBuild" } }
        - { "IpProtocol": "tcp", "FromPort": "5432", "ToPort": "5432", "SourceSecurityGroupId": { "Ref": "SecurityGroupBuild" } }
      Tags:
        - { Key: Name , Value: BuildSecurityGroup }
        - { Key: VPC  , Value: !Ref VPCName     }
        - { Key: Class, Value: "build" }




Outputs:

  VPC:        { Description: "VPC id"    , Value: { "Ref": "VPC"            } , Export: { Name: { "Fn::Sub": "${AWS::StackName}-VPC"        } } }

  PubSubnetA: { Description: "Subnet id" , Value: { "Ref": "SubnetPubA"     } , Export: { Name: { "Fn::Sub": "${AWS::StackName}-SubnetPubA" } } }
  PubSubnetB: { Description: "Subnet id" , Value: { "Ref": "SubnetPubB"     } , Export: { Name: { "Fn::Sub": "${AWS::StackName}-SubnetPubB" } } }
  PubSubnetC: { Description: "Subnet id" , Value: { "Ref": "SubnetPubC"     } , Export: { Name: { "Fn::Sub": "${AWS::StackName}-SubnetPubC" } } }

  SGSSH:      { Description: "SG id" , Value: { "Ref": "SecurityGroupSSH"   } , Export: { Name: { "Fn::Sub": "${AWS::StackName}-SGSSH"      } } }
  SGBuild:    { Description: "SG id" , Value: { "Ref": "SecurityGroupBuild" } , Export: { Name: { "Fn::Sub": "${AWS::StackName}-SGBuild"    } } }
  SGDB:       { Description: "SG id" , Value: { "Ref": "SecurityGroupDB"    } , Export: { Name: { "Fn::Sub": "${AWS::StackName}-SGDB"       } } }


